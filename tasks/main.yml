---
- name: Add the OS specific varibles
  include_vars: "{{ ansible_os_family }}.yml"
  tags: ['network']

- name: Remove the conflicted packages
  package:
    name: '{{ item }}'
    state: absent
  with_items: '{{ network__conflict_pkgs }}'
  tags: ['network']

- name: Install the required packages
  package:
    name: '{{ item }}'
    state: installed
  with_items: '{{ network__pkgs }}'
  when: item | length > 0
  tags: ['network']

- name: Init a fact which contains all network configurations
  set_fact:
    network__interfaces: '{{ network__ether_interfaces + network__bridge_interfaces + network__vlan_interfaces + network__bond_interfaces }}'
  tags: ['network']

- name: Check unicity of interface configuration
  fail:
    msg: "You have at least a device name which appear multiple times in your configuration"
  when: >
    network__interfaces | map(attribute='device') | list | length != (
    network__ether_interfaces | map(attribute='device') | list | length +
    network__bridge_interfaces | map(attribute='device') | list | length +
    network__vlan_interfaces | map(attribute='device') | list | length +
    network__bond_interfaces | map(attribute='device') | list | length )
  tags: ['network']

- name: Run the OS specific tasks
  include: "{{ ansible_os_family }}.yml"
  tags: ['network']

- meta: flush_handlers
  tags: ['network']

### BRIDGE

#- name: Create the network configuration file for bridge devices
  #template: src=bridge_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.device }}
  #with_items: '{{ network_bridge_interfaces }}'
  #when: network_bridge_interfaces is defined
  #register: bridge_result

#- name: Write configuration files for rhel route configuration
  #template: src=route_{{ ansible_os_family }}.j2 dest={{ net_path }}/route-{{ item.device }}
  #with_items: '{{ network_bridge_interfaces }}'
  #when: network_bridge_interfaces is defined and item.route is defined and ansible_os_family == 'RedHat'

#- shell: ifdown {{ item.item.device }}; ifup {{ item.item.device }}
  #with_items: '{{ bridge_result.results }}'
  #when: bridge_result is defined and item.changed

#- name: Create the network configuration file for port on the bridge devices
  #template: src=bridge_port_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.1 }}
  #with_subelements:
   #- '{{ network_bridge_interfaces }}'
   #- '{{ ports if ports is defined }}'
  #when: network_bridge_interfaces is defined
  #register: bridge_port_result

#- shell: ifdown {{ item.item.1 }}; ifup {{ item.item.1 }}
  #with_items: '{{ bridge_port_result.results }}'
  #when: bridge_port_result is defined and item.changed

### BOND

#- name: Create the network configuration file for bond devices
  #template: src=bond_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.device }}
  #with_items: '{{ network_bond_interfaces }}'
  #when: network_bond_interfaces is defined
  #register: bond_result

#- name: Make sure the bonding module is loaded
  #modprobe: name=bonding state=present
  #when: bond_result|changed

#- name: Write configuration files for route configuration
  #template: src=route_{{ ansible_os_family }}.j2 dest={{ net_path }}/route-{{ item.device }}
  #with_items: '{{ network_bond_interfaces }}'
  #when: network_bond_interfaces is defined and item.route is defined and ansible_os_family == 'RedHat'

#- shell: ifdown {{ item.item.device }}; ifup {{ item.item.device }}
  #with_items: '{{ bond_result.results }}'
  #when: bond_result is defined and item.changed

#- name: Create the network configuration file for slave in the bond devices
  #template: src=bond_slave_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.1 }}
  #with_subelements:
   #- '{{ network_bond_interfaces }}'
   #- '{{ bond_slaves if bond_slaves is defined }}'
  #when: network_bond_interfaces is defined
  #register: bond_port_result

#- shell: ifdown {{ item.item.1 }}; ifup {{ item.item.1 }}
  #with_items: '{{ bond_port_result.results }}'
  #when: bond_port_result is defined and item.changed

#- shell: ifdown {{ item.item.device }}; ifup {{ item.item.device }}
  #with_items: '{{ bond_result.results }}'
  #when: bond_result is defined and item.changed and ansible_os_family == 'RedHat'
