---
- name: Run the OS specific tasks
  include_tasks: "configure-{{ ansible_os_family | lower }}.yml"

- meta: flush_handlers

- name: Test if resolvconf is enabled
  command: resolvconf --updates-are-enabled
  register: _network__resolvconf_enabled
  check_mode: no
  changed_when: false
  failed_when: False
  when: ansible_os_family == 'Debian'

- name: Disable resolvconf to prevent resolv.conf to be updated
  command: resolvconf --disable-updates
  when: (ansible_os_family == 'Debian' and
        network__resolv_conf_options|length >= 0 and
        _network__resolvconf_enabled.rc == 0)

- name: Enable resolvconf to update resolv.conf
  command: resolvconf --enable-updates
  when: (ansible_os_family == 'Debian' and
          network__resolv_conf_options|length == 0 and
          _network__resolvconf_enabled.rc == 1)

- name: 'Configure resolver file : {{ network__resolv_conf_file }}'
  template:
    src: 'resolv.conf.j2'
    dest: '{{ network__resolv_conf_file }}'
    owner: root
    group: root
    mode: 0644
  when: network__resolv_conf_options|length >= 0

### BRIDGE

#- name: Create the network configuration file for bridge devices
  #template: src=bridge_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.device }}
  #with_items: '{{ network_bridge_interfaces }}'
  #when: network_bridge_interfaces is defined
  #register: bridge_result

#- name: Write configuration files for rhel route configuration
  #template: src=route_{{ ansible_os_family }}.j2 dest={{ net_path }}/route-{{ item.device }}
  #with_items: '{{ network_bridge_interfaces }}'
  #when: network_bridge_interfaces is defined and item.route is defined and ansible_os_family == 'RedHat'

#- shell: ifdown {{ item.item.device }}; ifup {{ item.item.device }}
  #with_items: '{{ bridge_result.results }}'
  #when: bridge_result is defined and item.changed

#- name: Create the network configuration file for port on the bridge devices
  #template: src=bridge_port_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.1 }}
  #with_subelements:
   #- '{{ network_bridge_interfaces }}'
   #- '{{ ports if ports is defined }}'
  #when: network_bridge_interfaces is defined
  #register: bridge_port_result

#- shell: ifdown {{ item.item.1 }}; ifup {{ item.item.1 }}
  #with_items: '{{ bridge_port_result.results }}'
  #when: bridge_port_result is defined and item.changed

### BOND

#- name: Create the network configuration file for bond devices
  #template: src=bond_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.device }}
  #with_items: '{{ network_bond_interfaces }}'
  #when: network_bond_interfaces is defined
  #register: bond_result

#- name: Make sure the bonding module is loaded
  #modprobe: name=bonding state=present
  #when: bond_result|changed

#- name: Write configuration files for route configuration
  #template: src=route_{{ ansible_os_family }}.j2 dest={{ net_path }}/route-{{ item.device }}
  #with_items: '{{ network_bond_interfaces }}'
  #when: network_bond_interfaces is defined and item.route is defined and ansible_os_family == 'RedHat'

#- shell: ifdown {{ item.item.device }}; ifup {{ item.item.device }}
  #with_items: '{{ bond_result.results }}'
  #when: bond_result is defined and item.changed

#- name: Create the network configuration file for slave in the bond devices
  #template: src=bond_slave_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.1 }}
  #with_subelements:
   #- '{{ network_bond_interfaces }}'
   #- '{{ bond_slaves if bond_slaves is defined }}'
  #when: network_bond_interfaces is defined
  #register: bond_port_result

#- shell: ifdown {{ item.item.1 }}; ifup {{ item.item.1 }}
  #with_items: '{{ bond_port_result.results }}'
  #when: bond_port_result is defined and item.changed

#- shell: ifdown {{ item.item.device }}; ifup {{ item.item.device }}
  #with_items: '{{ bond_result.results }}'
  #when: bond_result is defined and item.changed and ansible_os_family == 'RedHat'
