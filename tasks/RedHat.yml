---
### ETHERNET

- name: Create the network configuration file for ethernet devices
  template:
    src: 'ethernet_{{ ansible_os_family }}.j2'
    dest: '{{ net_path }}/ifcfg-{{ item.device }}'
  with_items: '{{ network_ether_interfaces }}'
  notify: [ 'Restart Network service' ]
  tags: network

- name: Write configuration files for IPv4 routes
  template:
    src: 'route_{{ ansible_os_family }}.j2'
    dest: '{{ net_path }}/route-{{ item.device }}'
  with_items: '{{ network_ether_interfaces }}'
  when: item.ipv4.route is defined
  notify: [ 'Restart Network service' ]
  tags: network


### VLAN

- name: Create the network configuration file for VLAN devices
  template:
    src: 'vlan_{{ ansible_os_family }}.j2'
    dest: '{{ net_path }}/ifcfg-{{ item.device }}'
  with_items: '{{ network_vlan_interfaces }}'
  notify: [ 'Restart Network service' ]
  tags: network

- name: Write configuration files for IPv4 routes
  template:
    src: 'route_{{ ansible_os_family }}.j2'
    dest: '{{ net_path }}/route-{{ item.device }}'
  with_items: '{{ network_vlan_interfaces }}'
  when: item.ipv4.route is defined
  notify: [ 'Restart Network service' ]
  tags: network


### BRIDGE

- name: Create the network configuration file for bridge devices
  template:
    src: 'bridge_{{ ansible_os_family }}.j2'
    dest: '{{ net_path }}/ifcfg-{{ item.device }}'
  with_items: '{{ network_bridge_interfaces }}'
  notify: [ 'Restart Network service' ]
  tags: network

- name: Write configuration files for IPv4 routes
  template:
    src: 'route_{{ ansible_os_family }}.j2'
    dest: '{{ net_path }}/route-{{ item.device }}'
  with_items: '{{ network_bridge_interfaces }}'
  when: item.ipv4.route is defined
  notify: [ 'Restart Network service' ]
  tags: network


#- shell: ifdown {{ item.item.device }}; ifup {{ item.item.device }}
  #with_items: '{{ bridge_result.results }}'
  #when: bridge_result is defined and item.changed
 
#- name: Create the network configuration file for port on the bridge devices
  #template: src=bridge_port_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.1 }}
  #with_subelements: 
   #- '{{ network_bridge_interfaces }}'
   #- '{{ ports if ports is defined }}'
  #when: network_bridge_interfaces is defined 
  #register: bridge_port_result

#- shell: ifdown {{ item.item.1 }}; ifup {{ item.item.1 }}
  #with_items: '{{ bridge_port_result.results }}'
  #when: bridge_port_result is defined and item.changed
