---
## Check invalid configuration
- name: List configured network interfaces
  find:
    paths: "{{ network__net_path }}/"
    patterns: "ifcfg-*"
  register: _network__interfaces
  tags: ['network']

- name: List configured network routes
  find:
    paths: "{{ network__net_path }}/"
    patterns: "route-*"
  register: _network__routes
  tags: ['network']

- name: Remove all inconsistent interfaces configurations
  become: yes
  file:
    state: absent
    path: '{{ item }}'
  with_items: "{{ _network__interfaces.files | map(attribute='path') | list }}"
  when: item | basename | replace('ifcfg-', '') not in network__interfaces | map(attribute='device') | list
  notify: [ 'Restart Network service' ]
  tags: ['network']

- name: Remove all inconsistent routes configurations
  become: yes
  file:
    state: absent
    path: '{{ item }}'
  with_items: "{{ _network__routes.files | map(attribute='path') | list }}"
  when: item | basename | replace('route-', '') not in network__interfaces | map(attribute='device') | list
  notify: [ 'Restart Network service' ]
  tags: ['network']

- name: Remove routes configuration that must be empty
  become: yes
  file:
    state: absent
    path: '{{ network__net_path }}/route-{{ item.device }}'
  with_items: '{{ network__interfaces }}'
  when: item.ipv4 is not defined or (item.ipv4 is defined and item.ipv4.route is not defined)
  notify: [ 'Restart Network service' ]
  tags: ['network']

### ETHERNET

- name: Create the network configuration file for ethernet devices
  template:
    src: 'ethernet_{{ ansible_os_family }}.j2'
    dest: '{{ network__net_path }}/ifcfg-{{ item.device }}'
  with_items: '{{ network__ether_interfaces }}'
  notify: [ 'Restart Network service' ]
  tags: ['network']

- name: Write configuration files for IPv4 routes
  template:
    src: 'route_{{ ansible_os_family }}.j2'
    dest: '{{ network__net_path }}/route-{{ item.device }}'
  with_items: '{{ network__ether_interfaces }}'
  when: item.ipv4.route is defined
  notify: [ 'Restart Network service' ]
  tags: ['network']


### VLAN

- name: Create the network configuration file for VLAN devices
  template:
    src: 'vlan_{{ ansible_os_family }}.j2'
    dest: '{{ network__net_path }}/ifcfg-{{ item.device }}'
  with_items: '{{ network__vlan_interfaces }}'
  notify: [ 'Restart Network service' ]
  tags: ['network']

- name: Write configuration files for IPv4 routes
  template:
    src: 'route_{{ ansible_os_family }}.j2'
    dest: '{{ network__net_path }}/route-{{ item.device }}'
  with_items: '{{ network__vlan_interfaces }}'
  when: item.ipv4.route is defined
  notify: [ 'Restart Network service' ]
  tags: ['network']


### BRIDGE

- name: Create the network configuration file for bridge devices
  template:
    src: 'bridge_{{ ansible_os_family }}.j2'
    dest: '{{ network__net_path }}/ifcfg-{{ item.device }}'
  with_items: '{{ network__bridge_interfaces }}'
  notify: [ 'Restart Network service' ]
  tags: ['network']

- name: Write configuration files for IPv4 routes
  template:
    src: 'route_{{ ansible_os_family }}.j2'
    dest: '{{ network__net_path }}/route-{{ item.device }}'
  with_items: '{{ network__bridge_interfaces }}'
  when: item.ipv4.route is defined
  notify: [ 'Restart Network service' ]
  tags: ['network']


#- shell: ifdown {{ item.item.device }}; ifup {{ item.item.device }}
  #with_items: '{{ bridge_result.results }}'
  #when: bridge_result is defined and item.changed
 
#- name: Create the network configuration file for port on the bridge devices
  #template: src=bridge_port_{{ ansible_os_family }}.j2 dest={{ net_path }}/ifcfg-{{ item.1 }}
  #with_subelements: 
   #- '{{ network_bridge_interfaces }}'
   #- '{{ ports if ports is defined }}'
  #when: network_bridge_interfaces is defined 
  #register: bridge_port_result

#- shell: ifdown {{ item.item.1 }}; ifup {{ item.item.1 }}
  #with_items: '{{ bridge_port_result.results }}'
  #when: bridge_port_result is defined and item.changed
